# CI Deployment protocol for tomcat 8

stages:
  - build
  - upload
  - deploy

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# Need to be defined in GITLAB CI Variables
#   REMOTE_IP : "138.102.159.37"
#   REMOTE_PORT: "8080"
#   WAR : openSilexTestAPI
#   MANAGER_ACCOUNT : phis
#   MANAGER_PASS : "*******"

variables:
   # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
   # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
   MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
   # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
   # when running from the command line.
   # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
   MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true -Dmaven.test.skip=true"
   BUILD_WAR_PATH: "phis2-ws/target/opensilex.war"
   

before_script:
  - mkdir -p .cache/maven.repository
  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ${HOME}/.ssh
  - chmod 700 ${HOME}/.ssh
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ${HOME}/.ssh/config
  - echo "$SSH_PRIVATE_KEY" > ${HOME}/.ssh/id_rsa
  - chmod 600 ${HOME}/.ssh/id_rsa

build:webservice:
  image: maven:3.3.9-jdk-8
  stage: build
  script:
    - cd phis2-ws
    - mvn $MAVEN_CLI_OPTS install -Ptest
  artifacts:
    paths:
    - $BUILD_WAR_PATH
    expire_in: "1 week"
    
## see https://hub.docker.com/r/kroniak/ssh-client/
update:webservice:
  image: kroniak/ssh-client
  stage: upload
  script:
    - scp -i ${HOME}/.ssh/id_rsa -o "StrictHostKeyChecking no" ./target/opensilex.war $SCP_ACCOUNT@$REMOTE_IP:/home/$SCP_ACCOUNT/tomcat9/webapps/$WAR.war
  when: manual
  dependencies:
    - build:webservice

reload:webservice:
  image: curlimages/curl
  stage: deploy
  script:
    - curl -v -T $BUILD_WAR_PATH "http://$MANAGER_ACCOUNT:$MANAGER_PASS@$REMOTE_IP:$REMOTE_PORT/manager/text/reload?path=/$WAR"
  dependencies:
    - update:webservice
