<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">
    <!-- configuration variables-->
    <property resource="service.properties" />
     <!-- output -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${logPattern}</pattern>
        </layout>
    </appender>
    <!-- information log output-->
    <appender name="INFOLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
         <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${logDirectory}/phenomeApiInfo.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <maxHistory>30</maxHistory>
            <fileNamePattern>${logDirectory}/phenomeApiInfo-%d{yyyy-MM-dd}.log.zip</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>${logPattern}</pattern>
        </encoder>
    </appender> 
    
     <!-- debug log output-->
    <appender name="DEBUGLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
         <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${logDirectory}/phenomeApiDebug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <maxHistory>30</maxHistory>
            <fileNamePattern>${logDirectory}/phenomeApiDebug-%d{yyyy-MM-dd}.log.zip</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>${logPattern}</pattern>
        </encoder>
    </appender> 
    
    <!-- error log output -->
    <appender name="ERRORLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${logDirectory}/phenomeApiError.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
             <!-- keep 30 days' worth of history -->
            <maxHistory>30</maxHistory>
            <fileNamePattern>${logDirectory}/phenomeApiError-%d{yyyy-MM-dd}.log.zip</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>${logPattern}</pattern>
        </encoder>
    </appender> 
    
     <!-- trace log output for relationnal database -->
    <appender name="DBLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">      
            <evaluator> <!-- defaults to type ch.qos.logback.classic.boolex.JaninoEventEvaluator -->
                <expression> return (logger.contains("DaoPhisBrapi") || logger.contains("DaoEnvironment") || logger.contains("SQLDAO"));</expression>
            </evaluator>
            <OnMismatch>DENY</OnMismatch>
            <OnMatch>ACCEPT</OnMatch>
        </filter>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>TRACE</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${logDirectory}/phenomeApiDB.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${logDirectory}/phenomeApiDB-%i.log.zip</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>200MB</maxFileSize>
        </triggeringPolicy>
        <encoder>
          <pattern>${logPattern}</pattern>
        </encoder>
    </appender> 
    
     <!--trace log output for graph database -->
    <appender name="SPARQLLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">      
            <evaluator> <!-- defaults to type ch.qos.logback.classic.boolex.JaninoEventEvaluator -->
                <expression>return logger.contains("DaoSesame");</expression>
            </evaluator>
            <OnMismatch>DENY</OnMismatch>
            <OnMatch>ACCEPT</OnMatch>
        </filter>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>TRACE</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${logDirectory}/phenomeApiSPARQL.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${logDirectory}/phenomeApiSPARQL-%i.log.zip</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>200MB</maxFileSize>
        </triggeringPolicy>
        <encoder>
          <pattern>${logPattern}</pattern>
        </encoder>
    </appender> 
    
    <!-- define log level output for specific packages -->
    <logger name="org.mongodb.driver" level="INFO"/>
    <logger name="org.apache" level="INFO"/>
    <logger name="org.apache.tomcat" level="INFO"/>
    <logger name="org.glassfish.jersey" level="DEBUG"/>
    <!--<logger name="i.s.c.ModelConverterContextImpl" level="ERROR"/>-->
    <!--<logger name="io.swagger.jackson" level="ERROR"/>-->
    <!--remove swagger debug log-->
    <logger name="io.swagger" level="INFO"/>
    <logger name="org.reflections" level="INFO"/>
    <logger name="org.openrdf" level="ERROR"/>
    
    <!-- appender by log type -->
    <root level="ALL">
        <appender-ref ref="DBLOG" />
        <appender-ref ref="SPARQLLOG" />
        <appender-ref ref="ERRORLOG" />
        <appender-ref ref="INFOLOG" />
        <!--<appender-ref ref="DEBUGLOG" />-->
        <appender-ref ref="STDOUT" />
    </root>
</configuration>
